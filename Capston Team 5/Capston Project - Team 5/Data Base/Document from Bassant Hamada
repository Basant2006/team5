-- =====================================================
-- Academic Management System - SQL Server Database Script (MODIFIED & CORRECTED)
-- This script includes:
-- 1. Robustly dropping existing foreign key constraints, triggers, and tables
--    (for a clean rebuild, resolving "Could not drop object" and "already an object" errors).
-- 2. Creating all tables with primary/unique keys, default values, and check constraints:
--    - All 'id' columns converted to BIGINT.
--    - 'order_id' (INT) added to each table.
--    - New 'status' table created.
--    - 'status_id' (BIGINT) added to each table, linking to the new status table.
--    - 'grade' table modified to support a tree structure with 'parent_grade_id'.
-- 3. REMOVED ALL FOREIGN KEY CONSTRAINTS as requested,
--    converting them to 'normal variables' (columns holding IDs).
-- 4. Inserting dummy data into all tables, including new order_id and status_id.
-- =====================================================
use [master];
GO
USE [master]
GO
ALTER DATABASE [CapstoneMangmentSystem] COLLATE Arabic_100_CI_AI
GO

USE CapstoneMangmentSystem; -- IMPORTANT: Replace [YourDatabaseName] with your actual database name
GO

-- =====================================================
-- 1. ROBUSTLY DROP EXISTING OBJECTS (for a clean rebuild)
-- This section ensures all related objects are dropped in the correct order
-- to prevent "referenced by FOREIGN KEY" and "already an object" errors.
-- =====================================================

PRINT 'Dropping existing foreign key constraints, triggers, and tables...';

-- Drop all foreign key constraints first to resolve dependency issues
DECLARE @sql NVARCHAR(MAX) = N'';

SELECT @sql += N'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id)) + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) +
    ' DROP CONSTRAINT ' + QUOTENAME(name) + ';'
FROM sys.foreign_keys
WHERE parent_object_id IN (
    OBJECT_ID('dbo.student_phase'),
    OBJECT_ID('dbo.student_task'),
    OBJECT_ID('dbo.report'),
    OBJECT_ID('dbo.task'),
    OBJECT_ID('dbo.phase'),
    OBJECT_ID('dbo.account'),
    OBJECT_ID('dbo.team'),
    OBJECT_ID('dbo.class'),
    OBJECT_ID('dbo.grade')
);

EXEC sp_executesql @sql;
GO

-- Drop existing triggers
IF OBJECT_ID('TR_grade_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_grade_updated_at;
IF OBJECT_ID('TR_class_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_class_updated_at;
IF OBJECT_ID('TR_team_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_team_updated_at;
IF OBJECT_ID('TR_account_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_account_updated_at;
IF OBJECT_ID('TR_phase_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_phase_updated_at;
IF OBJECT_ID('TR_task_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_task_updated_at;
IF OBJECT_ID('TR_student_task_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_student_task_updated_at;
IF OBJECT_ID('TR_student_phase_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_student_phase_updated_at;
IF OBJECT_ID('TR_report_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_report_updated_at;
IF OBJECT_ID('TR_status_updated_at', 'TR') IS NOT NULL DROP TRIGGER TR_status_updated_at; -- New trigger
GO

-- Drop tables in reverse order of (original) dependency
IF OBJECT_ID('dbo.student_phase', 'U') IS NOT NULL DROP TABLE dbo.student_phase;
IF OBJECT_ID('dbo.student_task', 'U') IS NOT NULL DROP TABLE dbo.student_task;
IF OBJECT_ID('dbo.report', 'U') IS NOT NULL DROP TABLE dbo.report;
IF OBJECT_ID('dbo.task', 'U') IS NOT NULL DROP TABLE dbo.task;
IF OBJECT_ID('dbo.phase', 'U') IS NOT NULL DROP TABLE dbo.phase;
IF OBJECT_ID('dbo.team', 'U') IS NOT NULL DROP TABLE dbo.team;
IF OBJECT_ID('dbo.account', 'U') IS NOT NULL DROP TABLE dbo.account; -- Account needs to be dropped after tables referencing it are gone
IF OBJECT_ID('dbo.class', 'U') IS NOT NULL DROP TABLE dbo.class;
IF OBJECT_ID('dbo.grade', 'U') IS NOT NULL DROP TABLE dbo.grade;
IF OBJECT_ID('dbo.status', 'U') IS NOT NULL DROP TABLE dbo.status;
GO

PRINT 'Existing objects dropped successfully.';

-- =====================================================
-- 2. CREATE TABLES (Modified)
-- All primary keys are now BIGINT.
-- An 'order_id' (INT) is added to each table.
-- A 'status_id' (BIGINT) is added to each table, referencing the new 'status' table.
-- IMPORTANT: All FOREIGN KEY CONSTRAINTS ARE REMOVED as per request.
-- This means referential integrity is no longer enforced by the database.
-- =====================================================

PRINT 'Creating new tables...';

-- STATUS TABLE (NEW)
-- Centralized table to manage statuses for all other entities.
CREATE TABLE dbo.status (
    id BIGINT NOT NULL IDENTITY(1,1), -- Primary key: Auto-incrementing unique identifier for a status
    status_name NVARCHAR(MAX) NOT NULL,      -- Business data: Name of the status (e.g., 'Active', 'Completed', 'Pending')
    order_id INT NULL,                       -- Custom order for displaying statuses
    b_entity NVARCHAR(MAX) NULL,             -- Optional: Specifies which entity/table this status typically applies to (e.g., 'Account', 'Task')
    is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_status PRIMARY KEY (id),
    --CONSTRAINT UK_status_name_active UNIQUE (status_name, is_deleted)
);
GO

-- GRADE TABLE
-- Represents academic grades/levels in the system
CREATE TABLE dbo.grade (
    id BIGINT NOT NULL IDENTITY(1,1), -- Primary key: Auto-incrementing unique identifier (BIGINT)
    grade_name NVARCHAR(100) NOT NULL,       -- Business data: Name of the grade (e.g., "Grade 10", "Senior Year")
    parent_grade_id BIGINT NULL,             -- New: Reference to a parent grade, allowing for a hierarchical structure (e.g., "Secondary School" -> "First Secondary Grade")
    admin_account_id BIGINT NULL,            -- Reference to admin who manages this grade (now just a column, no FK constraint)
    order_id INT NULL,                       -- New: Custom order for grades
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the grade, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_grade PRIMARY KEY (id),
    ---- Unique constraint: Prevent duplicate grade names (only for active records)
    --CONSTRAINT UK_grade_name_active UNIQUE (grade_name)
);
GO

-- CLASS TABLE
-- Represents individual classes within grades
CREATE TABLE dbo.class (
    ID BIGINT NOT NULL IDENTITY(1,1), -- Primary key: Auto-incrementing unique identifier (BIGINT)
    class_name NVARCHAR(100) NOT NULL,       -- Business data: Name of the class (e.g., "10A", "Math Advanced")
    grade_id BIGINT NOT NULL,                -- Reference to parent grade (now just a column, no FK constraint)
    order_id INT NULL,                       -- New: Custom order for classes
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the class, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_class PRIMARY KEY (ID),
    ---- Unique constraint: Prevent duplicate class names within same grade
    --CONSTRAINT UK_class_name_grade_active UNIQUE (class_name, grade_id, is_deleted)
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_class_grade
);
GO

-- TEAM TABLE
-- Represents student teams within classes
CREATE TABLE dbo.team (
    ID BIGINT NOT NULL IDENTITY(1,1), -- Primary key: Auto-incrementing team number (BIGINT)
    team_name NVARCHAR(100) NOT NULL,         -- Business data: Name of the team
    team_leader_account_id BIGINT NULL,       -- Reference to team leader (now just a column, no FK constraint)
    class_id BIGINT NOT NULL,                 -- Reference to parent class (now just a column, no FK constraint)
    order_id INT NULL,                        -- New: Custom order for teams
    status_id BIGINT NOT NULL DEFAULT 1,      -- New: Status of the team, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,        -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_team PRIMARY KEY (ID),
    ---- Unique constraint: Prevent duplicate team names within same class
    --CONSTRAINT UK_team_name_class_active UNIQUE (team_name, class_id, is_deleted)
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_team_class, FK_team_leader
);
GO

-- ACCOUNT TABLE
-- Central table for all users (students, teachers, admins)
CREATE TABLE dbo.account (
    ID BIGINT NOT NULL  IDENTITY(1,1),     -- Primary key: National ID serves as unique identifier (BIGINT)
    password NVARCHAR(255) NOT NULL,         -- Authentication: Encrypted password (should be hashed in application)
    email NVARCHAR(255) NOT NULL,            -- Contact information: Email address
    account_type NVARCHAR(50) NOT NULL,      -- User classification: Type of account (student/teacher/admin)
    account_Name NVARCHAR(100) NOT NULL,     -- Personal information: Full name
    team_number BIGINT NULL,                 -- Optional associations: Team membership (now just a column, no FK constraint)
    class_id BIGINT NULL,                    -- Optional associations: Class membership (now just a column, no FK constraint)
    order_id INT NULL,                       -- New: Custom order for accounts
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the account, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_account PRIMARY KEY (ID),
    ---- Unique constraint: Prevent duplicate emails (only for active accounts)
    --CONSTRAINT UK_email_active UNIQUE (email, is_deleted),
    ---- Business logic constraints
    --CONSTRAINT CHK_account_type
    --    CHECK (account_type IN ('student', 'teacher', 'admin')),
    ---- Email format validation (basic check)
    --CONSTRAINT CHK_email_format
    --    CHECK (email LIKE '%@%.%' AND LEN(email) > 5)
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_account_team, FK_account_class
);
GO

-- PHASE TABLE
-- Represents academic phases/semesters with deadlines
CREATE TABLE dbo.phase (
    ID BIGINT NOT NULL IDENTITY(1,1),     -- Primary key: Auto-incrementing unique identifier (BIGINT)
    phase_name NVARCHAR(100) NOT NULL,           -- Business data: Name of the phase (e.g., "Fall Semester", "Project Phase 1")
    phase_description NVARCHAR(MAX) NULL,        -- Optional description: Detailed information about the phase
    phase_deadline DATETIME2 NOT NULL,           -- Important deadline: When this phase ends
    grade_id BIGINT NOT NULL,                    -- Reference to parent grade (now just a column, no FK constraint)
    admin_account_id BIGINT NOT NULL,            -- Reference to admin who created this phase (now just a column, no FK constraint)
    order_id INT NULL,                           -- New: Custom order for phases
    status_id BIGINT NOT NULL DEFAULT 1,         -- New: Status of the phase, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,           -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_phase PRIMARY KEY (ID),
    ---- Unique constraint: Prevent duplicate phase names within same grade
    --CONSTRAINT UK_phase_name_grade_active UNIQUE (phase_name, grade_id, is_deleted),
    ---- Business logic: Ensure deadline is in the future when created (or at least not in the past)
    --CONSTRAINT CHK_phase_deadline_future
    --    CHECK (phase_deadline >= created_at)
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_phase_grade, FK_phase_admin
);
GO

-- TASK TABLE
-- Represents individual tasks within phases
CREATE TABLE dbo.task (
    ID BIGINT NOT NULL IDENTITY(1,1),     -- Primary key: Auto-incrementing unique identifier (BIGINT)
    task_name NVARCHAR(100) NOT NULL,          -- Business data: Name of the task
    task_description NVARCHAR(MAX) NULL,       -- Optional description: Detailed task instructions
    task_deadline DATETIME2 NOT NULL,          -- Important deadline: When this task is due
    github_link NVARCHAR(255) NULL,            -- Optional resource: GitHub repository link for the task
    phase_id BIGINT NOT NULL,                  -- Reference to parent phase (now just a column, no FK constraint)
    order_id INT NULL,                         -- New: Custom order for tasks
    status_id BIGINT NOT NULL DEFAULT 1,       -- New: Status of the task, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,         -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_task PRIMARY KEY (ID),
    ---- Unique constraint: Prevent duplicate task names within same phase
    --CONSTRAINT UK_task_name_phase_active UNIQUE (task_name, phase_id, is_deleted),
    ---- Business logic: Ensure deadline is in the future when created (or at least not in the past)
    --CONSTRAINT CHK_task_deadline_future
    --    CHECK (task_deadline >= created_at),
    ---- GitHub link validation: Must be a valid GitHub URL if provided
    --CONSTRAINT CHK_github_link_format
    --    CHECK (github_link IS NULL OR github_link LIKE 'https://github.com/%')
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_task_phase
);
GO

-- STUDENT_TASK TABLE
-- Many-to-many relationship: Students and their task completion status
CREATE TABLE dbo.student_task (
    ID BIGINT NOT NULL IDENTITY(1,1),     -- Composite primary key part 1: Student identifier (BIGINT)
    task_id BIGINT NOT NULL,                 -- Composite primary key part 2: Task identifier (BIGINT)
    is_completed BIT NOT NULL DEFAULT 0,     -- Completion status: Whether student has completed this task
    order_id INT NULL,                       -- New: Custom order for student tasks
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the student task, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    completed_at DATETIME2 NULL,             -- Completion timestamp: When task was marked as completed (nullable)
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_student_task PRIMARY KEY (ID, task_id),
    ---- Business logic: Ensure completion timestamp consistency
    --CONSTRAINT CHK_student_task_completed_at_logic
    --    CHECK ((is_completed = 1 AND completed_at IS NOT NULL) OR (is_completed = 0 AND completed_at IS NULL))
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_student_task_account, FK_student_task_task
);
GO

-- STUDENT_PHASE TABLE
-- Many-to-many relationship: Students and their phase completion status
CREATE TABLE dbo.student_phase (
    ID BIGINT NOT NULL  IDENTITY(1,1),     -- Composite primary key part 1: Student identifier (BIGINT)
    phase_id BIGINT NOT NULL,                -- Composite primary key part 2: Phase identifier (BIGINT)
    is_completed BIT NOT NULL DEFAULT 0,     -- Completion status: Whether student has completed this phase
    order_id INT NULL,                       -- New: Custom order for student phases
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the student phase, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    completed_at DATETIME2 NULL,             -- Completion timestamp: When phase was marked as completed (nullable)
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_student_phase PRIMARY KEY (ID, phase_id),
    ---- Business logic: Ensure completion timestamp consistency
    --CONSTRAINT CHK_student_phase_completed_at_logic
    --    CHECK ((is_completed = 1 AND completed_at IS NOT NULL) OR (is_completed = 0 AND completed_at IS NULL))
    ---- FOREIGN KEY CONSTRAINT REMOVED: FK_student_phase_account, FK_student_phase_phase
);
GO

-- REPORT TABLE
-- Stores user-submitted reports and feedback
CREATE TABLE dbo.report (
    ID BIGINT NOT NULL IDENTITY(1,1), -- Primary key: Auto-incrementing unique identifier (BIGINT)
    title NVARCHAR(255) NOT NULL,            -- Report content: Title/subject of the report
    submission_date DATETIME2 NOT NULL DEFAULT GETDATE(), -- Timestamp: When report was submitted (defaults to current time)
    rptmessage NVARCHAR(MAX) NOT NULL,          -- Report content: Main message/body of the report
    submitter_account_id BIGINT NOT NULL,    -- Reference to user who submitted the report (now just a column, no FK constraint)
    order_id INT NULL,                       -- New: Custom order for reports
    status_id BIGINT NOT NULL DEFAULT 1,     -- New: Status of the report, defaults to 1 (e.g., 'Active')
    --is_deleted BIT NOT NULL DEFAULT 0,       -- Soft delete flag
    created_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields
    updated_at DATETIME2 NOT NULL DEFAULT GETDATE(), -- Audit fields

    CONSTRAINT PK_report PRIMARY KEY (ID)
    -- FOREIGN KEY CONSTRAINT REMOVED: FK_report_submitter
);
GO

-- =====================================================
-- 3. REMOVED CIRCULAR DEPENDENCY FOREIGN KEYS
-- As per request, all foreign key constraints are removed.
-- The ALTER TABLE statements for adding FKs are also removed.
-- =====================================================

-- Original ALTER TABLE statements for FKs are removed:
-- ALTER TABLE dbo.grade ADD CONSTRAINT FK_grade_admin ...
-- ALTER TABLE dbo.team ADD CONSTRAINT FK_team_leader ...

-- =====================================================
-- 4. TRIGGERS FOR AUTOMATIC UPDATED_AT TIMESTAMPS
-- IMPORTANT: All CREATE TRIGGER statements are removed as per request.
-- This means the 'updated_at' column will no longer be automatically updated
-- by database triggers. Application logic will need to handle this.
-- =====================================================


-- =====================================================
-- 5. INSERT DUMMY DATA (Modified)
-- Data is inserted in an order that respects dependencies,
-- now including 'order_id' and 'status_id' for each record.
-- IDs are adjusted to reflect BIGINT type, though IDENTITY handles most.
-- Grade data now includes parent_grade_id for a tree structure.
-- =====================================================

PRINT 'Inserting dummy data...';

-- Inserting Status Data (NEW)
INSERT INTO dbo.status (status_name, order_id, b_entity,  created_at, updated_at) VALUES
('Active', 1, 'General',  GETDATE(), GETDATE()),
('Inactive', 2, 'General',  GETDATE(), GETDATE()),
('Pending', 3, 'Task, Phase',  GETDATE(), GETDATE()),
('Completed', 4, 'Task, Phase',  GETDATE(), GETDATE()),
('Archived', 5, 'General',  GETDATE(), GETDATE()),
('Approved', 6, 'Report',  GETDATE(), GETDATE()),
('Rejected', 7, 'Report',  GETDATE(), GETDATE());

-- Inserting Grade Data (GRADES) with hierarchical structure
-- Assuming Grade IDs will be 1, 2, 3, 4, 5, 6, 7
INSERT INTO dbo.grade (grade_name, parent_grade_id, admin_account_id, order_id, status_id, created_at, updated_at) VALUES
('Primary School', NULL, NULL, 1, 1,  '2023-09-01 08:00:00', '2023-09-01 08:00:00'), -- ID 1 (Top-level)
('Secondary School', NULL, NULL, 2, 1,  '2023-09-01 08:00:00', '2023-09-01 08:00:00'), -- ID 2 (Top-level)
('First Secondary Grade', 2, NULL, 1, 1,  '2024-01-15 08:00:00', '2024-01-15 08:00:00'), -- ID 3, child of Secondary School (ID 2)
('Second Secondary Grade', 2, NULL, 2, 1,  '2024-01-15 08:00:00', '2024-01-15 08:00:00'), -- ID 4, child of Secondary School (ID 2)
('Third Secondary Grade', 2, NULL, 3, 1,  '2024-01-15 08:00:00', '2024-01-15 08:00:00'), -- ID 5, child of Secondary School (ID 2)
('Fourth Secondary Grade', 2, NULL, 4, 1,  '2024-01-15 08:00:00', '2024-01-15 08:00:00'), -- ID 6, child of Secondary School (ID 2)
('Fifth Secondary Grade', 2, NULL, 5, 1,  '2024-01-15 08:00:00', '2024-01-15 08:00:00'); -- ID 7, child of Secondary School (ID 2)

-- Inserting Class Data (CLASSES) - Adjusted grade_id references based on new grade IDs
INSERT INTO dbo.class (class_name, grade_id, order_id, status_id,  created_at, updated_at) VALUES
-- First Secondary Grade Classes (now grade_id 3)
('Class 1 A', 3, 1, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 1 B', 3, 2, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 1 C', 3, 3, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
-- Second Secondary Grade Classes (now grade_id 4)
('Class 2 A', 4, 4, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 2 B', 4, 5, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 2 C', 4, 6, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
-- Third Secondary Grade Classes (now grade_id 5)
('Class 3 A', 5, 7, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 3 B', 5, 8, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 3 C', 5, 9, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
-- Fourth Secondary Grade Classes (now grade_id 6)
('Class 4 A', 6, 1, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 4 B', 6, 11, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
-- Fifth Secondary Grade Classes (now grade_id 7)
('Class 5 A', 7, 12, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00'),
('Class 5 B', 7, 13, 1,  '2024-01-16 09:00:00', '2024-01-16 09:00:00');

-- Inserting Team Data (TEAMS)
INSERT INTO dbo.team (team_name, team_leader_account_id, class_id, order_id, status_id,  created_at, updated_at) VALUES
-- Teams for Class 1 A (class_id 1)
('Stars Team', NULL, 1, 1, 1,  '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Falcons Team', NULL, 1, 2, 1,  '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Lions Team', NULL, 1, 3, 1,  '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
-- Teams for Class 1 B (class_id 2)
('Cheetahs Team', NULL, 2, 4, 1,  '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Eagles Team', NULL, 2, 5, 1,  '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Monsters Team', NULL, 2, 6, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
-- Teams for Class 2 A (class_id 4)
('Warriors Team', NULL, 4, 7, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Heroes Team', NULL, 4, 8, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Winners Team', NULL, 4, 9, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
-- Teams for Class 3 A (class_id 7)
('Innovators Team', NULL, 7, 10, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Ambitious Team', NULL, 7, 11, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00'),
('Outstanding Team', NULL, 7, 12, 1, '2024-01-17 10:00:00', '2024-01-17 10:00:00');

-- Inserting Admin Accounts (account_national_id is BIGINT)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'admin123!@#', 'admin1@school.edu', 'admin', 'Dr. Mohamed Ahmed El-Sayed', NULL, NULL, 1, 1, '2024-01-10 08:00:00', '2024-01-10 08:00:00'),
( 'admin456$%^', 'admin2@school.edu', 'admin', 'Dr. Fatima Ali Mahmoud', NULL, NULL, 2, 1, '2024-01-10 08:00:00', '2024-01-10 08:00:00'),
( 'admin789&*(', 'admin3@school.edu', 'admin', 'Dr. Abdullah Mohamed Hassan', NULL, NULL, 3, 1, '2024-01-10 08:00:00', '2024-01-10 08:00:00');

-- Inserting Teacher Accounts (account_national_id is BIGINT)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'teacher123', 'teacher1@school.edu', 'teacher', 'Ms. Sara Abdelrahman', NULL, 1, 4, 1, '2024-01-12 09:00:00', '2024-01-12 09:00:00'),
( 'teacher456', 'teacher2@school.edu', 'teacher', 'Mr. Ahmed Mohamed Ali', NULL, 2, 5, 1, '2024-01-12 09:00:00', '2024-01-12 09:00:00'),
( 'teacher789', 'teacher3@school.edu', 'teacher', 'Ms. Nora Samir Ibrahim', NULL, 4, 6, 1, '2024-01-12 09:00:00', '2024-01-12 09:00:00'),
( 'teacher101', 'teacher4@school.edu', 'teacher', 'Mr. Khaled Abdullah', NULL, 7, 7, 1, '2024-01-12 09:00:00', '2024-01-12 09:00:00'),
( 'teacher102', 'teacher5@school.edu', 'teacher', 'Ms. Maryam Hassan Ahmed', NULL, 10, 8, 1, '2024-01-12 09:00:00', '2024-01-12 09:00:00');

-- Inserting Student Accounts - Class 1 A (class_id 1)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'student123', 'omar.ahmed@student.edu', 'student', 'Omar Ahmed Mohamed', 1, 1, 9, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student124', 'layla.ali@student.edu', 'student', 'Layla Ali Hassan', 1, 1, 10, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student125', 'mohamed.hassan@student.edu', 'student', 'Mohamed Hassan Abdullah', 1, 1, 11, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student126', 'fatima.omar@student.edu', 'student', 'Fatima Omar Said', 2, 1, 12, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student127', 'youssef.mahmoud@student.edu', 'student', 'Youssef Mahmoud Ahmed', 2, 1, 13, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student128', 'nour.ibrahim@student.edu', 'student', 'Nour Ibrahim Mohamed', 2, 1, 14, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student129', 'ahmed.salah@student.edu', 'student', 'Ahmed Salah El-Din', 3, 1, 15, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student130', 'mona.farid@student.edu', 'student', 'Mona Farid Abdelrahman', 3, 1, 16, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student131', 'karim.waheed@student.edu', 'student', 'Karim Waheed Mahmoud', 3, 1, 17, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00');

-- Inserting Student Accounts - Class 1 B (class_id 2)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'student132', 'sara.mohamed@student.edu', 'student', 'Sara Mohamed Ali', 4, 2, 18, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student133', 'hassan.abdel@student.edu', 'student', 'Hassan Abdullah Ahmed', 4, 2, 19, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student134', 'amira.samir@student.edu', 'student', 'Amira Samir Hassan', 4, 2, 20, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student135', 'omar.khaled@student.edu', 'student', 'Omar Khaled Mahmoud', 5, 2, 21, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student136', 'dina.ahmed@student.edu', 'student', 'Dina Ahmed Abdelrahman', 5, 2, 22, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student137', 'ali.hassan@student.edu', 'student', 'Ali Hassan Mohamed', 5, 2, 23, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student138', 'rana.omar@student.edu', 'student', 'Rana Omar Said', 6, 2, 24, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student139', 'mahmoud.ali@student.edu', 'student', 'Mahmoud Ali Ahmed', 6, 2, 25, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student140', 'hala.ibrahim@student.edu', 'student', 'Hala Ibrahim Mohamed', 6, 2, 26, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00');

-- Inserting Student Accounts - Class 2 A (class_id 4)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'student141', 'mariam.ahmed@student.edu', 'student', 'Mariam Ahmed Mohamed', 7, 4, 27, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student142', 'youssef.omar@student.edu', 'student', 'Youssef Omar Ali', 7, 4, 28, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student143', 'nada.hassan@student.edu', 'student', 'Nada Hassan Abdullah', 7, 4, 29, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student144', 'ibrahim.mohamed@student.edu', 'student', 'Ibrahim Mohamed Hassan', 8, 4, 30, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student145', 'yasmin.ali@student.edu', 'student', 'Yasmin Ali Ahmed', 8, 4, 31, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student146', 'tarek.abdel@student.edu', 'student', 'Tarek Abdelrahman', 8, 4, 32, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student147', 'lina.samir@student.edu', 'student', 'Lina Samir Mohamed', 9, 4, 33, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student148', 'khaled.omar@student.edu', 'student', 'Khaled Omar Hassan', 9, 4, 34, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student149', 'salma.ahmed@student.edu', 'student', 'Salma Ahmed Ali', 9, 4, 35, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00');

-- Inserting Student Accounts - Class 3 A (class_id 7)
INSERT INTO dbo.account ( password, email, account_type, account_Name, team_number, class_id, order_id, status_id,  created_at, updated_at) VALUES
( 'student150', 'adam.hassan@student.edu', 'student', 'Adam Hassan Mohamed', 10, 7, 36, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student151', 'nour.ahmed@student.edu', 'student', 'Nour Ahmed Abdullah', 10, 7, 37, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student152', 'basel.omar@student.edu', 'student', 'Basel Omar Ali', 10, 7, 38, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student153', 'reem.mohamed@student.edu', 'student', 'Reem Mohamed Hassan', 11, 7, 39, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student154', 'saad.ali@student.edu', 'student', 'Saad Ali Ahmed', 11, 7, 40, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student155', 'maya.hassan@student.edu', 'student', 'Maya Hassan Abdelrahman', 11, 7, 41, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student156', 'ziad.omar@student.edu', 'student', 'Ziad Omar Mohamed', 12, 7, 42, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student157', 'laila.ahmed@student.edu', 'student', 'Laila Ahmed Said', 12, 7, 43, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00'),
( 'student158', 'fares.hassan@student.edu', 'student', 'Fares Hassan Ali', 12, 7, 44, 1, '2024-01-18 10:00:00', '2024-01-18 10:00:00');

-- Updating Admin in Grades (after admin accounts are inserted)
-- Note: Grade IDs are now 1-7 based on the new inserts.
UPDATE dbo.grade SET admin_account_id = 100000000001 WHERE  id= 3; -- First Secondary Grade
UPDATE dbo.grade SET admin_account_id = 100000000002 WHERE id = 4; -- Second Secondary Grade
UPDATE dbo.grade SET admin_account_id = 100000000003 WHERE id = 5; -- Third Secondary Grade
UPDATE dbo.grade SET admin_account_id = 100000000001 WHERE id = 6; -- Fourth Secondary Grade
UPDATE dbo.grade SET admin_account_id = 100000000002 WHERE id = 7; -- Fifth Secondary Grade

-- Updating Team Leaders (after student accounts are inserted)
UPDATE dbo.team SET team_leader_account_id = 300000000001 WHERE ID = 1;
UPDATE dbo.team SET team_leader_account_id = 300000000004 WHERE ID = 2;
UPDATE dbo.team SET team_leader_account_id = 300000000007 WHERE ID = 3;
UPDATE dbo.team SET team_leader_account_id = 300000000010 WHERE ID = 4;
UPDATE dbo.team SET team_leader_account_id = 300000000013 WHERE ID = 5;
UPDATE dbo.team SET team_leader_account_id = 300000000016 WHERE ID = 6;
UPDATE dbo.team SET team_leader_account_id = 300000000019 WHERE ID = 7;
UPDATE dbo.team SET team_leader_account_id = 300000000022 WHERE ID = 8;
UPDATE dbo.team SET team_leader_account_id = 300000000025 WHERE ID = 9;
UPDATE dbo.team SET team_leader_account_id = 300000000028 WHERE ID = 10;
UPDATE dbo.team SET team_leader_account_id = 300000000031 WHERE ID = 11;
UPDATE dbo.team SET team_leader_account_id = 300000000034 WHERE ID = 12;

-- Inserting Phase Data (PHASES) - Adjusted grade_id references
INSERT INTO dbo.phase (phase_name, phase_description, phase_deadline, grade_id, admin_account_id, order_id, status_id,  created_at, updated_at) VALUES
-- Phases for First Secondary Grade (now grade_id 3)
('First Semester', 'Foundation and basic learning phase', '2024-12-31 23:59:59', 3, 100000000001, 1, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00'),
('Second Semester', 'Development and evaluation phase', '2025-06-30 23:59:59', 3, 100000000001, 2, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00'),
('Graduation Project', 'End of academic year project', '2025-05-31 23:59:59', 3, 100000000001, 3, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00'),
-- Phases for Second Secondary Grade (now grade_id 4)
('First Semester', 'Advanced and specialization phase', '2024-12-31 23:59:59', 4, 100000000002, 4, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00'),
('Second Semester', 'Preparation for final stage', '2025-06-30 23:59:59', 4, 100000000002, 5, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00'),
('Scientific Research Project', 'Advanced research project', '2025-05-15 23:59:59', 4, 100000000002, 6, 1, '2024-01-20 09:00:00', '2024-01-20 09:00:00');

-- Inserting Task Data (TASKS)
INSERT INTO dbo.task (task_name, task_description, task_deadline, github_link, phase_id, order_id, status_id,  created_at, updated_at) VALUES
-- Tasks for First Secondary Grade - First Semester (Phase ID 1)
('Math Fundamentals Quiz', 'Quiz covering basic algebra and geometry.', '2024-10-15 17:00:00', NULL, 1, 1, 1, '2024-09-01 09:00:00', '2024-09-01 09:00:00'),
('Science Lab Report', 'Write a report on the chemical reactions experiment.', '2024-11-01 23:59:59', NULL, 1, 2, 1, '2024-09-05 10:00:00', '2024-09-05 10:00:00'),
('History Essay', 'Essay on the causes of World War I.', '2024-11-20 23:59:59', NULL, 1, 3, 1, '2024-09-10 11:00:00', '2024-09-10 11:00:00'),
-- Tasks for First Secondary Grade - Second Semester (Phase ID 2)
('Literature Analysis', 'Analyze a chosen novel from the curriculum.', '2025-03-10 23:59:59', NULL, 2, 4, 1, '2025-01-15 09:00:00', '2025-01-15 09:00:00'),
('Physics Problem Set', 'Complete problems on kinematics and dynamics.', '2025-04-05 17:00:00', NULL, 2, 5, 1, '2025-01-20 10:00:00', '2025-01-20 10:00:00'),
-- Tasks for First Secondary Grade - Graduation Project (Phase ID 3)
('Project Proposal', 'Submit your graduation project proposal.', '2025-02-15 23:59:59', 3, 6, 1, 0, '2025-01-01 08:00:00', '2025-01-01 08:00:00'),
('Final Project Submission', 'Submit the complete graduation project.', '2025-05-30 23:59:59', 3, 7, 1, 0, '2025-01-01 08:00:00', '2025-01-01 08:00:00');

-- Inserting Student Task Data (STUDENT_TASK)
-- Assuming student 300000000001 (Omar Ahmed Mohamed)
INSERT INTO dbo.student_task ( task_id, is_completed, order_id, status_id, completed_at,  created_at, updated_at) VALUES
( 1, 1, 1, 4, '2024-10-10 15:00:00', '2024-09-01 10:00:00', '2024-10-10 15:00:00'), -- Completed Math Quiz
( 2, 0, 2, 3, NULL, '2024-09-05 11:00:00', '2024-09-05 11:00:00'), -- Pending Science Lab
( 3, 0, 3, 3, NULL, '2024-09-10 12:00:00', '2024-09-10 12:00:00'); -- Pending History Essay

-- Assuming student 300000000004 (Fatima Omar Said)
INSERT INTO dbo.student_task ( task_id, is_completed, order_id, status_id, completed_at,  created_at, updated_at) VALUES
( 1, 1, 4, 4, '2024-10-12 16:00:00', '2024-09-01 10:00:00', '2024-10-12 16:00:00'),
( 2, 1, 5, 4, '2024-10-28 20:00:00', '2024-09-05 11:00:00', '2024-10-28 20:00:00');

-- Inserting Student Phase Data (STUDENT_PHASE)
-- Assuming student 300000000001 (Omar Ahmed Mohamed)
INSERT INTO dbo.student_phase ( phase_id, is_completed, order_id, status_id, completed_at,  created_at, updated_at) VALUES
( 1, 0, 1, 3, NULL, '2024-01-25 10:00:00', '2024-01-25 10:00:00'), -- First Semester Pending
( 2, 0, 2, 3, NULL,  '2024-01-25 10:00:00', '2024-01-25 10:00:00'); -- Second Semester Pending

-- Inserting Report Data (REPORTS)
INSERT INTO dbo.report (title, submission_date, rptmessage, submitter_account_id, order_id, status_id,  created_at, updated_at) VALUES
('Bug Report - Login Issue', '2024-06-01 14:30:00', 'Users are unable to log in using correct credentials. Error rptrptmessage: "Invalid credentials".', 300000000001, 1, 3, '2024-06-01 14:30:00', '2024-06-01 14:30:00'),
('Feature Request - Dark Mode', '2024-06-05 09:00:00', 'Please add a dark mode option to the user interface for better readability at night.', 300000000005, 2, 3,  '2024-06-05 09:00:00', '2024-06-05 09:00:00'),
('Complaint - Teacher Feedback', '2024-06-10 11:00:00', 'Student reported unfair grading from a specific teacher. Needs investigation.', 300000000010, 3, 3, '2024-06-10 11:00:00', '2024-06-10 11:00:00');

PRINT 'Dummy data insertion complete.';
GO

-- =====================================================
-- SQL Server Data Retrieval Queries
-- These queries retrieve all data from each table in the
-- Academic Management System database.
-- =====================================================

PRINT 'Retrieving data from all tables...';

-- Query to retrieve all data from the Status table
SELECT
    id,
    status_name,
    order_id,
    b_entity,
    
    created_at,
    updated_at
FROM
    dbo.status;
GO

-- Query to retrieve all data from the Grade table
SELECT
    ID,
    grade_name,
    parent_grade_id, -- Added for tree structure
    admin_account_id,
    order_id,
    status_id,
    created_at,
    updated_at
FROM
    dbo.grade;
GO

-- Query to retrieve all data from the Class table
SELECT
    ID,
    class_name,
    grade_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.class;
GO

-- Query to retrieve all data from the Team table
SELECT
	ID
    ID,
    team_name,
    team_leader_account_id,
    class_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.team;
GO

-- Query to retrieve all data from the Account table
SELECT
	ID,
    password,
    email,
    account_type,
    account_Name,
    team_number,
    class_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.account;
GO

-- Query to retrieve all data from the Phase table
SELECT
    ID,
    phase_name,
    phase_description,
    phase_deadline,
    grade_id,
    admin_account_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.phase;
GO

-- Query to retrieve all data from the Task table
SELECT
    ID,
    task_name,
    task_description,
    task_deadline,
    github_link,
    phase_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.task;
GO

-- Query to retrieve all data from the Student_Task table
SELECT
    ID,
    task_id,
    is_completed,
    order_id,
    status_id,
    
    completed_at,
    created_at,
    updated_at
FROM
    dbo.student_task;
GO

-- Query to retrieve all data from the Student_Phase table
SELECT
    ID,
    phase_id,
    is_completed,
    order_id,
    status_id,
    
    completed_at,
    created_at,
    updated_at
FROM
    dbo.student_phase;
GO

-- Query to retrieve all data from the Report table
SELECT
    ID,
    title,
    submission_date,
    rptmessage,
    submitter_account_id,
    order_id,
    status_id,
    
    created_at,
    updated_at
FROM
    dbo.report;
GO

PRINT 'All data retrieval queries executed.';
GO
